//@skip-check module-unused-method
//@skip-check module-structure-top-region

#Область ОписаниеПеременных
&НаКлиенте
Перем
	ОтложенныеПараметры Экспорт
	, СостояниеТаблицыФормы Экспорт
;
#КонецОбласти

#Область ОбработчикиСобытийФормыВМоделиСостояния

&НаКлиенте
Процедура РассчитатьОтложенныеПараметры() Экспорт
	ИзмененныеПараметры = РаботаСМассивом.СкопироватьМассив(ОтложенныеПараметры);
	ОтложенныеПараметры = Новый Массив;
	ПриИзмененииНаКлиенте(ИзмененныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуНаСервере(ИзмененныеПараметры = Неопределено)
	РаботаСМодельюФормыКлиентСервер.ОбновитьФорму(ЭтотОбъект, ИзмененныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуНаКлиенте(ИзмененныеПараметры = Неопределено)
	СостояниеРасчета = РаботаСМодельюФормыКлиентСервер.ОбновитьФорму(ЭтотОбъект, ИзмененныеПараметры);
	Если НЕ СостояниеРасчета.Статус Тогда
		ОбновитьФормуНаСервере(СостояниеРасчета);
		Возврат; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНаСервере(ИзмененныеПараметры = Неопределено, СостояниеРасчета = Неопределено)
	СостояниеРасчета = РаботаСМодельюОбъектаКлиентСервер.Рассчитать(ЭтотОбъект, ИзмененныеПараметры, СостояниеРасчета);
	ОбновитьФормуНаСервере(СостояниеРасчета.РассчитанныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНаКлиенте(ИзмененныеПараметры)
	СостояниеРасчета = РаботаСМодельюОбъектаКлиентСервер.Рассчитать(ЭтотОбъект, ИзмененныеПараметры);
	Если НЕ СостояниеРасчета.Статус Тогда
		ПриИзмененииНаСервере( , СостояниеРасчета);
		Возврат; 
	КонецЕсли;
	ОбновитьФормуНаКлиенте(СостояниеРасчета.РассчитанныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзменении(Элемент)
	Перем ИзмененныеПараметры;
	//  МодельСостояния
	МодельОбъекта = РаботаСМодельюОбъектаКлиентСервер.ПолучитьМодель(ЭтотОбъект);
	РасчетныйПараметр = РаботаСМодельюФормыКлиентСервер.ПолучитьРасчетныйПараметрЭлементаФормы(ЭтотОбъект, Элемент.Имя);
	Если РасчетныйПараметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РаботаСМодельюОбъектаКлиентСервер.ПриИзмененииПараметра(МодельОбъекта, РасчетныйПараметр, , ИзмененныеПараметры);
	ПриИзмененииНаКлиенте(ИзмененныеПараметры);
	//  Конец МодельСостояния
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСМодельюФормыКлиент.ПроверитьЗаполнениеПараметровВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииВМоделиФормы(Отказ)
	РаботаСМодельюФормыКлиент.ПриОткрытииВМоделиФормы(ЭтотОбъект, Отказ);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиВМоделиФормыНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	РаботаСМодельюФормы.ПриЧтенииВМоделиФормыНаСервере(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииВМоделиФормыНаСервере(ТекущийОбъект)
	РаботаСМодельюФормы.ПриЧтенииВМоделиФормыНаСервере(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВМоделиСостояния

&НаКлиенте
Процедура ВыборСтрокиТаблицыФормы(ТаблицаФормы, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РаботаСМодельюФормыКлиент.ВыборСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтрокиТаблицыФормы(ТаблицаФормы)
	РаботаСМодельюФормыКлиент.ПриАктивизацииСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДобавленияСтрокиТаблицыФормы(ТаблицаФормы, Отказ, Копирование, Родитель, Группа, Параметр)
	РаботаСМодельюФормыКлиент.ПередНачаломДобавленияСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы, Отказ, Копирование, Родитель, Группа, Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломИзмененияСтрокиТаблицыФормы(ТаблицаФормы, Отказ)
	РаботаСМодельюФормыКлиент.ПередНачаломИзмененияСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПередОкончаниемРедактированияСтрокиТаблицыФормы(ТаблицаФормы, НоваяСтрока, ОтменаРедактирования, Отказ)
	РаботаСМодельюФормыКлиент.ПередОкончаниемРедактированияСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы, НоваяСтрока, ОтменаРедактирования, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПередУдалениемСтрокиТаблицыФормы(ТаблицаФормы, Отказ)
	РаботаСМодельюФормыКлиент.ПередУдалениемСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы, Отказ);
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиПараметровВыбора(НастройкиПараметровВыбора)
	РаботаСМодельюФормы.ПрименитьНастройкиПараметровВыбора(ЭтотОбъект, НастройкиПараметровВыбора);
КонецПроцедуры 

&НаКлиенте
Процедура ПриНачалеРедактированияСтрокиТаблицыФормы(ТаблицаФормы, НоваяСтрока, Копирование)
	РаботаСМодельюФормыКлиент.ПриНачалеРедактированияСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы, НоваяСтрока, Копирование);
	НастройкиПараметровВыбора = РаботаСМодельюФормыКлиентСервер.НастройкиПараметровВыбораТаблицыФормы(ЭтотОбъект, ТаблицаФормы);
	Если ЗначениеЗаполнено(НастройкиПараметровВыбора) Тогда
		ПрименитьНастройкиПараметровВыбора(НастройкиПараметровВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияСтрокиТаблицыФормы(ТаблицаФормы, НоваяСтрока, ОтменаРедактирования)
	РаботаСМодельюФормыКлиент.ПриОкончанииРедактированияСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы, НоваяСтрока, ОтменаРедактирования);
КонецПроцедуры

#КонецОбласти

#Область СвойстваЭлементовИЗначенияПараметровВМоделиСостояния

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МодельСостояния = РаботаСМодельюСостояния.МодельСостояния(ЭтотОбъект);
	//  Элементы формы
	///////////////////////////////////////////////////////////
	УстановитьУсловноеОформление();
	ДобавитьОператор("Таблица", 0);
	ДобавитьОператор("Отношение", 1);
	ДобавитьОператор("База", 2);
	//  Конец МодельСостояния
	//  Инициализация схемы
	Схема = МодельСостояния.Схема;		
	РаботаСМодельюСостояния.ДобавитьЭлементыФормы(Схема);
	РаботаСМодельюСостояния.ПрименитьМодельОбъекта(Схема);
	//  Применение модели формы
	МодельОбъекта = РаботаСМодельюОбъектаКлиентСервер.ПолучитьМодель(ЭтотОбъект);
	РаботаСМодельюФормы.НастроитьПараметрыВыбора(МодельОбъекта);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//  Расчет модели объекта
	МодельОбъекта = РаботаСМодельюОбъектаКлиентСервер.ПолучитьМодель(ЭтотОбъект);
	РаботаСМодельюОбъектаКлиентСервер.РассчитатьПараметрыКонтекста(МодельОбъекта);
	ПриОткрытииВМоделиФормы(Отказ);
	ОбновитьФормуНаКлиенте();
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОтступа(ЧислоСимволов)
	Возврат СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(Символы.Таб, ЧислоСимволов);
КонецФункции

&НаКлиенте
Процедура ПолучитьМодельDSL(Команда)
	Строки = Новый Массив;
	Строки.Добавить("МодельРаспределения = Общий.МодельРаспределения(МодельЗапроса.МенеджерВременныхТаблиц);");
	Строки.Добавить("МодельРаспределения");
	Для Каждого Оператор Из СтруктураМодели.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Оператор.Псевдоним) Тогда
			Строки.Добавить(СтрШаблон("%1.%2(""%3"", ""%4"")", СтрокаОтступа(1), Оператор.Роль, Оператор.Имя, Оператор.Псевдоним));
		Иначе
			Строки.Добавить(СтрШаблон("%1.%2(""%3"")", СтрокаОтступа(1), Оператор.Роль, Оператор.Имя));
		КонецЕсли;
		Для Каждого Секция Из Оператор.ПолучитьЭлементы() Цикл
			Строки.Добавить(СтрШаблон("%1.%2()", СтрокаОтступа(2), Секция.Роль));
			Для Каждого Поле Из Секция.ПолучитьЭлементы() Цикл
				Если ЗначениеЗаполнено(Поле.Псевдоним) Тогда
					Строки.Добавить(СтрШаблон("%1.Поле(""%2"", ""%3"")", СтрокаОтступа(3), Поле.Имя, Поле.Псевдоним));
				Иначе
					Строки.Добавить(СтрШаблон("%1.Поле(""%2"")", СтрокаОтступа(3), Поле.Имя));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Строки.Добавить(";");
	//Строки.Добавить("МодельРаспределения.Распределить();");
	Объект.МодельDSL = СтрСоединить(Строки, Символы.ПС);
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеJSONНаСервере()
	Перем МодельРаспределения;
	//@skip-check module-unused-local-variable
	МодельЗапроса = Общий.МодельЗапроса();
	//@skip-check server-execution-safe-mode
	Выполнить(Объект.МодельDSL);
	Если ЗначениеЗаполнено(Объект.ДанныеJSON) Тогда
		Схема = ОбщийКлиентСервер.JSONВОбъект(Объект.ДанныеJSON);
	Иначе
		Схема = Новый Структура;
	КонецЕсли;
	Схема.Вставить("Схема", МодельРаспределения.Схема);
	Если Схема.Свойство("Таблицы") Тогда
		Объект.ДанныеJSON = ОбщийКлиентСервер.ОбъектВJSON(Схема);
		Возврат;
	КонецЕсли;
	Схема.Вставить("Таблицы", Новый Массив);
	Таблицы = Схема.Таблицы;
	Для Каждого Оператор Из СтруктураМодели.ПолучитьЭлементы() Цикл
		Таблица = Новый Структура("Имя, Колонки, Строки", Оператор.Имя, Новый Структура, Новый Массив);
		Таблицы.Добавить(Таблица);
		Колонки = Таблица.Колонки;
		ЗначенияСтроки = Новый Массив;
		Для Каждого Секция Из Оператор.ПолучитьЭлементы() Цикл
			Для Каждого Поле Из Секция.ПолучитьЭлементы() Цикл
				Колонки.Вставить(Поле.Имя, ?(Секция.Роль = "Ресурсы", "Число", "Строка(50)"));
				ЗначенияСтроки.Добавить(?(Секция.Роль = "Ресурсы", 0, ""));
			КонецЦикла;
		КонецЦикла;
		Таблица.Строки.Добавить(ЗначенияСтроки);
	КонецЦикла;
	Объект.ДанныеJSON = ОбщийКлиентСервер.ОбъектВJSON(Схема);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеJSON(Команда)
	ПолучитьДанныеJSONНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	СформироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоляИсточника(МодельЗапроса, Источник, Секция, Точность = 2)
	Перем Измерения;
	Если Источник.Свойство(Секция, Измерения) Тогда
		Если Секция = "Ресурсы" Тогда
			Для Каждого Поле Из Измерения Цикл
				МодельЗапроса
					.Поле(СтрШаблон("ВЫРАЗИТЬ(%1 КАК ЧИСЛО(%2, %3))", Поле.Поле, 15, Точность), ?(ЗначениеЗаполнено(Поле.Псевдоним), Поле.Псевдоним, Поле.Поле))
				;
			КонецЦикла;
			Возврат;
		КонецЕсли;
		Для Каждого Поле Из Измерения Цикл
			МодельЗапроса
				.Поле(Поле.Поле, Поле.Псевдоним)
			;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗапросИсточника(Схема, МодельЗапроса, ИмяИсточника, Псевдоним)
	Источник = Схема[ИмяИсточника];
	Если ТипЗнч(Источник.Источник) = Тип("Строка") Тогда
		МодельЗапроса.ЗапросПакета(ИмяИсточника).Поместить(Псевдоним)
			.Источник(Источник.Источник, Источник.Псевдоним)
		;
	Иначе
		МодельЗапроса.ЗапросПакета().Поместить(Источник.Псевдоним)
			.Источник(Источник.Источник, Источник.Псевдоним)
			.Поле("*")
		;
		МодельЗапроса.ЗапросПакета(ИмяИсточника)
			.Источник(Источник.Псевдоним)
		;
	КонецЕсли;
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "ИзмеренияТаблицы");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "ИзмеренияБазы");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "Измерения");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "Реквизиты");
	ДобавитьПоляИсточника(МодельЗапроса, Источник, "Ресурсы");
	Для Каждого Порядок Из Источник.Порядок Цикл
		МодельЗапроса
			.Порядок(Порядок.Выражение, Порядок.Направление)
		;
	КонецЦикла;
	Для Каждого ВыражениеОтбора Из Источник.Отбор Цикл
		МодельЗапроса
			.Отбор(ВыражениеОтбора)
		;
	КонецЦикла;
	Если Источник.Автопорядок Тогда
		МодельЗапроса
			.Автопорядок()
		;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатРаспределения(МодельРаспределения)
	Схема = МодельРаспределения.Схема;
	Если Схема.Таблица.Ресурсы.Количество() > 1 Тогда
		Ресурсы = Схема.Таблица.Ресурсы;				
	Иначе
		Ресурсы = Схема.База.Ресурсы;
	КонецЕсли;
	МодельЗапроса = Общий.МодельЗапроса(МодельРаспределения.МенеджерВременныхТаблиц)
	;
	;//  ЗАПРОС ПАКЕТА. ВТ_РЕЗУЛЬТАТ 
	МодельЗапроса.ЗапросПакета().Поместить("ВТ_РЕЗУЛЬТАТ")
		.Источник(МодельРаспределения.РезультатРаспределения)
		.Поле("*")
	;//  ЗАПРОС ПАКЕТА. ВТ_ОСТАТОК
	МодельЗапроса.ЗапросПакета().Поместить("ВТ_ОСТАТОК")
		.Источник(МодельРаспределения.ТаблицаРаспределения)
		.Поле("*")
//	;//  ЗАПРОС ПАКЕТА. ВТ_ОТНОШЕНИЕ
//	МодельЗапроса.ЗапросПакета().Поместить("ВТ_ОТНОШЕНИЕ")
//		.Источник(МодельРаспределения.ТаблицаОтношения)
//		.Поле("*")
	;//  ЗАПРОС ПАКЕТА. ВТ_ОТНОШЕНИЕ
	МодельЗапроса.ЗапросПакета("Результат").Поместить("ВТ_ТРАНСФОРМАЦИЯ")
		.Источник(Схема.Таблица.Источник, "ВТ_ТАБЛИЦА")
		.Источник(Схема.Отношение.Источник, "ВТ_ОТНОШЕНИЕ") // эта таблица должна быть, т.к. из нее модель распределения получает источник
		.Источник("ВТ_РЕЗУЛЬТАТ")
		.ЛевоеСоединение("ВТ_ТАБЛИЦА", "ВТ_ОТНОШЕНИЕ")
			.Связь(РаботаСМассивом.АТДМассив(Схема.Таблица.Измерения)
				.Отобразить("Элемент.Поле + ' = ' + Элемент.Псевдоним")
				.ВМассив()
			)
			.ЛевоеСоединение("ВТ_ОТНОШЕНИЕ", "ВТ_РЕЗУЛЬТАТ")
				.Связь(РаботаСМассивом.АТДМассив(Схема.Отношение.ИзмеренияТаблицы)
					.Отобразить("Элемент.Псевдоним")
					.ВМассив()
				)
				.Связь(РаботаСМассивом.АТДМассив(Схема.Отношение.ИзмеренияБазы)
					.Отобразить("Элемент.Псевдоним")
					.ВМассив()
				)
		//  Измерения
		.Поля(РаботаСМассивом.АТДМассив(Схема.Таблица.Измерения)
			.Отобразить("Новый Структура('Поле, Псевдоним', СтрШаблон('ВТ_ТАБЛИЦА.%1', Элемент.Поле), Элемент.Псевдоним)")
			.ВМассив()
		)
		.Поля(РаботаСМассивом.АТДМассив(Схема.База.Измерения)
			.Отобразить("Новый Структура('Поле, Псевдоним', СтрШаблон('ВТ_ОТНОШЕНИЕ.%1', Элемент.Псевдоним))")
			.ВМассив()
		)
		//  Реквизиты
		.Поля(РаботаСМассивом.АТДМассив(Схема.Таблица.Реквизиты)
			.Отобразить("Новый Структура('Поле, Псевдоним', СтрШаблон('ВТ_ТАБЛИЦА.%1', Элемент.Поле), Элемент.Псевдоним)")
			.ВМассив()
		)
		.Поля(РаботаСМассивом.АТДМассив(Схема.База.Реквизиты)
			.Отобразить("Новый Структура('Поле, Псевдоним', СтрШаблон('ВТ_РЕЗУЛЬТАТ.%1', Элемент.Поле), Элемент.Псевдоним)")
			.ВМассив()
		)
		//  Ресурсы: НачальныйОстаток
		.Поля(РаботаСМассивом.АТДМассив(Ресурсы)
			.Отобразить("Новый Структура('Поле, Псевдоним', СтрШаблон('ВТ_ТАБЛИЦА.%1', Элемент.Поле), Элемент.Псевдоним + 'НачальныйОстаток')")
			.ВМассив()
		)
		//  Ресурсы: Распределение
		.Поля(РаботаСМассивом.АТДМассив(Ресурсы)
			.Отобразить("Новый Структура('Поле, Псевдоним', СтрШаблон('ВТ_РЕЗУЛЬТАТ.%1', Элемент.Поле), Элемент.Псевдоним + 'Распределение')")
			.ВМассив()
		)
		//  Ресурсы: КонечныйОстаток
		.Поля(РаботаСМассивом.АТДМассив(Ресурсы)
			.Отобразить("Новый Структура('Поле, Псевдоним', СтрШаблон('(ВТ_ТАБЛИЦА.%1 - ЕСТЬNULL(ВТ_РЕЗУЛЬТАТ.%1, 0))', Элемент.Поле), Элемент.Псевдоним + 'КонечныйОстаток')")
			.ВМассив()
		)
	;//  ЗАПРОС ПАКЕТА. Результат
	МодельЗапроса.ВыполнитьЗапрос();
	////////////////////////////////////////////////////////////////////////////////
	//  Модель отчета
	////////////////////////////////////////////////////////////////////////////////
	//  Схема компоновки
	МодельСхемыКомпоновки = Общий.МодельСхемыКомпоновкиДанных()
	;//  Источник данных
	МодельЗапроса.ЗапросПакета()
		.Выбрать()
			.Источник("ВТ_ТРАНСФОРМАЦИЯ")
			.Поле("*")
	;
	ТекстЗапроса = МодельЗапроса.ПолучитьТекстЗапроса();
	МодельСхемыКомпоновки.НаборДанныхЗапрос(ТекстЗапроса);
	МодельСхемыКомпоновки.Измерения();
	Для Каждого Поле Из Схема.Отношение.ИзмеренияТаблицы Цикл
		МодельСхемыКомпоновки.Поле(Поле.Псевдоним);	
	КонецЦикла;
	Для Каждого Поле Из Схема.Отношение.ИзмеренияБазы Цикл
		МодельСхемыКомпоновки.Поле(Поле.Псевдоним);	
	КонецЦикла;
	МодельСхемыКомпоновки.Ресурсы();
	Для Каждого Группа Из СтрРазделить("Начальный остаток,Распределение,Конечный остаток", ",") Цикл
		Для Каждого Ресурс Из Ресурсы Цикл
			МодельСхемыКомпоновки.Сумма(Ресурс.Поле + СтрЗаменить(Группа, " ", ""));	
		КонецЦикла;
	КонецЦикла;
	//  Реквизиты
	МодельСхемыКомпоновки.Реквизиты();
	ПоляРеквизитов = РаботаСМассивом.АТДМассив(Схема.Таблица.Реквизиты)
			.Отобразить("Элемент.Псевдоним")
			.ВМассив()
	;
	РаботаСМассивом.ДополнитьМассив(
		ПоляРеквизитов,
		РаботаСМассивом.АТДМассив(Схема.База.Реквизиты)
			.Отобразить("Элемент.Псевдоним")
			.ВМассив()
	);
	Для Каждого ПолеРеквизита Из ПоляРеквизитов Цикл
		МодельСхемыКомпоновки.Поле(ПолеРеквизита);	
	КонецЦикла;
	////////////////////////////////////////////////////////////////////////////////
	//  Настройка компоновки
	МодельНастройкиКомпоновки = Общий.МодельНастройкиКомпоновкиДанных(МодельСхемыКомпоновки.СхемаКомпоновкиДанных);
	МодельНастройкиКомпоновки
		.Измерения()
		.ГруппаНачать("Измерения", РасположениеПоляКомпоновкиДанных.Авто)
	;
		Для Каждого Поле Из Схема.Отношение.ИзмеренияТаблицы Цикл
			МодельНастройкиКомпоновки.Поле(Поле.Псевдоним);	
		КонецЦикла;
		Для Каждого Поле Из Схема.Отношение.ИзмеренияБазы Цикл
			МодельНастройкиКомпоновки.Поле(Поле.Псевдоним);	
		КонецЦикла;
	МодельНастройкиКомпоновки.ГруппаЗавершить();
	МодельНастройкиКомпоновки
		.Реквизиты()
		.ГруппаНачать("Реквизиты", РасположениеПоляКомпоновкиДанных.Авто)
	;
		Для Каждого Поле Из ПоляРеквизитов Цикл
			МодельНастройкиКомпоновки.Поле(Поле);	
		КонецЦикла;
	МодельНастройкиКомпоновки.ГруппаЗавершить();
	МодельНастройкиКомпоновки
		.Ресурсы()
		.ГруппаНачать("Ресурсы", РасположениеПоляКомпоновкиДанных.Авто)
	;
		Для Каждого Группа Из СтрРазделить("Начальный остаток,Распределение,Конечный остаток", ",") Цикл
			МодельНастройкиКомпоновки
				.ГруппаНачать(Группа, РасположениеПоляКомпоновкиДанных.Авто)
			;
			Для Каждого Ресурс Из Ресурсы Цикл
				МодельНастройкиКомпоновки.Поле(Ресурс.Поле + СтрЗаменить(Группа, " ", ""), Ресурс.Псевдоним);	
			КонецЦикла;
			МодельНастройкиКомпоновки
				.ГруппаЗавершить()
			;
		КонецЦикла;
	МодельНастройкиКомпоновки
		.ГруппаЗавершить()
	;
	МодельНастройкиКомпоновки
		.Структура()
			.ГруппировкаНачать()
				.Поле("*")
			.ГруппировкаЗавершить()
	;//  Порядок
	ПоляПорядка = РаботаСМассивом.АТДМассив()
		.ДополнитьМассив(Схема.Таблица.Порядок)
		.ДополнитьМассив(Схема.Отношение.Порядок)
		.ДополнитьМассив(Схема.База.Порядок)
		.ВМассив()
	;
	Для Каждого Поле Из ПоляПорядка Цикл
		МодельНастройкиКомпоновки.Порядок(Поле.Выражение, ?(Поле.Направление = НаправлениеПорядкаСхемыЗапроса.ПоУбыванию, "-", "+"));		
	КонецЦикла;
	МодельНастройкиКомпоновки
		.ПараметрыВывода()
			.Параметр("МакетОформления", "Арктика")
	;
	////////////////////////////////////////////////////////////////////////////////
	//  Макет компоновки данных
	МодельМакетаКомпоновки = Общий.МодельМакетаКомпоновкиДанных();
	МодельМакетаКомпоновки
		.Схема(МодельСхемыКомпоновки.СхемаКомпоновкиДанных)
		.Настройки(МодельНастройкиКомпоновки.Настройки)
		.Скомпоновать()
		.ИдентификаторТаблицы()
		.МенеджерВременныхТаблиц(МодельЗапроса.МенеджерВременныхТаблиц)
		.ВывестиВТабличныйДокумент(Результат)		
	;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределение(Результат)
	Перем МодельРаспределения;
	Перем РезультатРаспределения;
//	///////////////////////////////////////////////////////////////////////
//	//  Модель DSL
//	///////////////////////////////////////////////////////////////////////
//	Таблица = "
//	|{
//	|	'Колонки': {'Объект': 'СТРОКА(50)', 'Статья': 'СТРОКА(50)',	'Сумма': 'ЧИСЛО(15, 2)', 'СуммаБезНДС': 'ЧИСЛО(15, 2)',	'СуммаНДС': 'ЧИСЛО(15, 2)'},
//	|	'Строки': [
//	|		['Об1', 'Ст1', 1, 0.9, 0.1],
//	|		['Об1', 'Ст2', 1, 0.9, 0.1],
//	|		['Об2', 'Ст1', 1, 0.9, 0.1],
//	|	]
//	|}";
//	Отношение = "
//	|{
//	|	'Колонки': {'ОбъектТаблица': 'СТРОКА(50)', 'СтатьяТаблица': 'СТРОКА(50)', 'ОбъектБаза': 'СТРОКА(50)', 'СтатьяБаза': 'СТРОКА(50)'},
//	|	'Строки': [
//	|		['Об1', 'Ст1', 'Об1', 'Ст1'],
//	|		['Об1', 'Ст2', 'Об1', 'Ст2'],
//	|		['Об2', 'Ст1', 'Об2', 'Ст1'],
//	|	]
//	|}";
//	База = "
//	|{
//	|	'Колонки': {'Объект': 'СТРОКА(50)',	'Статья': 'СТРОКА(50)',	'Очередь': 'ЧИСЛО(2)', 'Сумма': 'ЧИСЛО(15, 2)', 'СуммаБезНДС': 'ЧИСЛО(15, 2)', 'СуммаНДС': 'ЧИСЛО(15, 2)'},
//	|	'Строки': [
//	|		['Об1', 'Ст1', 1, 1, 0.9, 0.1],
//	|		['Об1', 'Ст1', 2, 1, 0.9, 0.1],
//	|		['Об1', 'Ст2', 1, 2, 1.9, 0.1],
//	|		['Об1', 'Ст2', 2, 1, 0.9, 0.1],
//	|		['Об2', 'Ст1', 1, 11, 9, 2],
//	|		['Об2', 'Ст1', 2, 10, 8, 2],
//	|	]
//	|}";
//	МодельЗапроса = Общий.МодельЗапроса()
//	;
//	МодельЗапроса.ЗапросПакета().Поместить("ВТ_ТАБЛИЦА")
//		.Источник(ОбщийКлиентСервер.JSONВОбъект(Таблица))
//		.Поле("*")
//	;
//	МодельЗапроса.ЗапросПакета().Поместить("ВТ_ОТНОШЕНИЕ")
//		.Источник(ОбщийКлиентСервер.JSONВОбъект(Отношение))
//		.Поле("*")
//	;
//	МодельЗапроса.ЗапросПакета().Поместить("ВТ_БАЗА")
//		.Источник(ОбщийКлиентСервер.JSONВОбъект(База))
//		.Поле("*")
//	;
//	МодельЗапроса.ВыполнитьЗапрос();
//	МодельРаспределения = Общий.МодельРаспределения(МодельЗапроса.МенеджерВременныхТаблиц)
//		.Таблица("ВТ_ТАБЛИЦА")
//			.Измерения()
//				.Поле("Объект", "ОбъектТаблица")
//				.Поле("Статья", "СтатьяТаблица")
//			.Ресурсы()
//				.Поле("Сумма")
//				.Поле("СуммаБезНДС")
//				.Поле("СуммаНДС")
//		.Отношение("ВТ_ОТНОШЕНИЕ")
//			.ИзмеренияТаблицы()
//				.Поле("ОбъектТаблица")
//				.Поле("СтатьяТаблица")
//			.ИзмеренияБазы()
//				.Поле("ОбъектБаза")
//				.Поле("СтатьяБаза")
//		.База("ВТ_БАЗА")
//			.Измерения()
//				.Поле("Объект", "ОбъектБаза")
//				.Поле("Статья", "СтатьяБаза")
//			.Ресурсы()
//				.Поле("Сумма")
//			.Реквизиты()
//				.Поле("Очередь")
//			.Порядок("Очередь")
//	;
//	МодельРаспределения.Распределить();
	//@skip-check server-execution-safe-mode
	Выполнить(Объект.МодельDSL);
	//МодельРаспределения.Распределить();
	Схема = МодельРаспределения.Схема;
	Если Схема.Таблица.Ресурсы.Количество() > 1 Тогда
		Ресурсы = Схема.Таблица.Ресурсы;				
	Иначе
		Ресурсы = Схема.База.Ресурсы;
	КонецЕсли;
	Пока МодельРаспределения.Следующий() Цикл
		Если РезультатРаспределения = Неопределено Тогда
			РезультатРаспределения = МодельРаспределения.РезультатРаспределения.СкопироватьКолонки();
			РезультатРаспределения.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(9));
			Для Каждого Ресурс Из Ресурсы Цикл
				РезультатРаспределения.Колонки.Добавить(Ресурс.Псевдоним + "НачальныйОстаток", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				РезультатРаспределения.Колонки.Добавить(Ресурс.Псевдоним + "КонечныйОстаток", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				РезультатРаспределения.Колонки.Добавить(Ресурс.Псевдоним + "Распределение", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));				
			КонецЦикла;
		КонецЕсли;
		СтрокаРезультата = МодельРаспределения.СтрокаРезультата;
		СтрокаТаблицы = МодельРаспределения.ИтераторТаблицы.ТекущиеДанные;
		СтрокаРаспределения = РезультатРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаРезультата);
		Для Каждого Ресурс Из Ресурсы Цикл
			ИмяПоля = Ресурс.Псевдоним;
			СтрокаРаспределения[ИмяПоля + "НачальныйОстаток"] = СтрокаТаблицы[ИмяПоля];
			СтрокаРаспределения[ИмяПоля + "КонечныйОстаток"] = СтрокаТаблицы[ИмяПоля] - СтрокаРезультата[ИмяПоля];
			СтрокаРаспределения[ИмяПоля + "Распределение"] = СтрокаРезультата[ИмяПоля];
		КонецЦикла;			
	КонецЦикла;
	///////////////////////////////////////////////////////////////////////
	//  Формирование отчета
	МодельЗапроса = Общий.МодельЗапроса(МодельРаспределения.МенеджерВременныхТаблиц)
	;//  ЗАПРОС ПАКЕТА. ВТ_РЕЗУЛЬТАТ 
	МодельЗапроса.ЗапросПакета().Поместить("ВТ_РЕЗУЛЬТАТ")
		.Источник(РезультатРаспределения)
		.Поле("*")
	;//  ЗАПРОС ПАКЕТА. ВТ_ОСТАТОК
	МодельЗапроса.ЗапросПакета().Поместить("ВТ_ОСТАТОК")
		.Источник(МодельРаспределения.ТаблицаРаспределения)
		.Поле("*")
	;
	МодельЗапроса.ЗапросПакета().Поместить("ВТ_РЕЗУЛЬТАТ_РАСПРЕДЕЛЕНИЯ")
		.Выбрать()
			.Источник("ВТ_РЕЗУЛЬТАТ")
			.Поле("*")
		.ОбъединитьВсе()
			.Источник("ВТ_ОСТАТОК")
			.Источник("ВТ_РЕЗУЛЬТАТ")
			.ЛевоеСоединение("ВТ_ОСТАТОК", "ВТ_РЕЗУЛЬТАТ")
				.Связь(РаботаСМассивом.АТДМассив(Схема.Таблица.Измерения)
					.Отобразить("Элемент.Псевдоним")
					.ВМассив()
				)
			.Отбор(СтрШаблон("ВТ_РЕЗУЛЬТАТ.%1 ЕСТЬ NULL", Схема.Таблица.Измерения[0].Псевдоним))
			.Поле("ВТ_ОСТАТОК.*")
	;
	МодельЗапроса.ВыполнитьЗапрос();

	////////////////////////////////////////////////////////////////////////////////
	//  Модель отчета
	////////////////////////////////////////////////////////////////////////////////
	//  Схема компоновки
	МодельСхемыКомпоновки = Общий.МодельСхемыКомпоновкиДанных()
	;//  Источник данных
	МодельЗапроса.ЗапросПакета()
		.Источник("ВТ_РЕЗУЛЬТАТ_РАСПРЕДЕЛЕНИЯ")
		.Поле("*")
	;
	ТекстЗапроса = МодельЗапроса.ПолучитьТекстЗапроса();
	МодельСхемыКомпоновки.НаборДанныхЗапрос(ТекстЗапроса)
		.Измерения()
	;
	Для Каждого Поле Из Схема.Отношение.ИзмеренияТаблицы Цикл
		МодельСхемыКомпоновки
			.Поле(Поле.Псевдоним)
		;	
	КонецЦикла;
	Для Каждого Поле Из Схема.Таблица.Реквизиты Цикл
		МодельСхемыКомпоновки
			.Поле(Поле.Псевдоним)
		;	
	КонецЦикла;
	МодельСхемыКомпоновки
		.Ресурсы()
	;
	Для Каждого Ресурс Из Ресурсы Цикл
		МодельСхемыКомпоновки
			.НачальныйОстаток(Ресурс.Поле + "НачальныйОстаток", , Ресурс.Поле).Оформление("Формат", "ЧЦ=15; ЧДЦ=2;")
			.Сумма(Ресурс.Поле + "Распределение").Оформление("Формат", "ЧЦ=15; ЧДЦ=2;")	
			.КонечныйОстаток(Ресурс.Поле + "КонечныйОстаток", , Ресурс.Поле).Оформление("Формат", "ЧЦ=15; ЧДЦ=2;")
		;	
	КонецЦикла;
	//  Реквизиты
	МодельСхемыКомпоновки
		.Реквизиты()
		.Период("НомерСтроки").Обязательное()
	;
	Для Каждого Поле Из Схема.Отношение.ИзмеренияБазы Цикл
		МодельСхемыКомпоновки
			.Поле(Поле.Псевдоним)
		;	
	КонецЦикла;
	Для Каждого Поле Из Схема.База.Реквизиты Цикл
		МодельСхемыКомпоновки
			.Поле(Поле.Псевдоним)
		;	
	КонецЦикла;
	////////////////////////////////////////////////////////////////////////////////
	//  Настройка компоновки
	МодельНастройкиКомпоновки = Общий.МодельНастройкиКомпоновкиДанных(МодельСхемыКомпоновки.СхемаКомпоновкиДанных)
	;
	Для Каждого Поле Из Схема.Отношение.ИзмеренияТаблицы Цикл
		МодельНастройкиКомпоновки
			.Поле(Поле.Псевдоним)
		;	
	КонецЦикла;
	Для Каждого Поле Из Схема.Таблица.Реквизиты Цикл
		МодельНастройкиКомпоновки
			.Поле(Поле.Псевдоним)
		;	
	КонецЦикла;
	Для Каждого Поле Из Схема.Отношение.ИзмеренияБазы Цикл
		МодельНастройкиКомпоновки
			.Поле(Поле.Псевдоним)
		;	
	КонецЦикла;
	Для Каждого Поле Из Схема.База.Реквизиты Цикл
		МодельНастройкиКомпоновки
			.Поле(Поле.Псевдоним)
		;	
	КонецЦикла;
	МодельНастройкиКомпоновки
		.ГруппаНачать("Ресурсы", РасположениеПоляКомпоновкиДанных.Авто)
	;
		Для Каждого Группа Из СтрРазделить("Начальный остаток,Распределение,Конечный остаток", ",") Цикл
			МодельНастройкиКомпоновки
				.ГруппаНачать(Группа, РасположениеПоляКомпоновкиДанных.Авто)
			;
			Для Каждого Ресурс Из Ресурсы Цикл
				МодельНастройкиКомпоновки
					.Поле(Ресурс.Поле + СтрЗаменить(Группа, " ", ""), Ресурс.Псевдоним)
				;	
			КонецЦикла;
			МодельНастройкиКомпоновки
				.ГруппаЗавершить()
			;
		КонецЦикла;
	МодельНастройкиКомпоновки
		.ГруппаЗавершить()
		.Структура()
			.ГруппировкаНачать()
	;
			Для Каждого Поле Из Схема.Отношение.ИзмеренияТаблицы Цикл
				МодельНастройкиКомпоновки
					.ПолеГруппировки(Поле.Псевдоним)
				;
			КонецЦикла;
			Для Каждого Поле Из Схема.Таблица.Реквизиты Цикл
				МодельНастройкиКомпоновки
					.ПолеГруппировки(Поле.Псевдоним)
				;
			КонецЦикла;
			МодельНастройкиКомпоновки
				.Поле("*")
				.ГруппировкаНачать()
					.ПолеГруппировки("*")
					.Поле("*")
				.ГруппировкаЗавершить()
			.ГруппировкаЗавершить()
		.Порядок("НомерСтроки")
		.ПараметрыВывода()
			.Параметр("МакетОформления", "Арктика")
	;
	////////////////////////////////////////////////////////////////////////////////
	//  Макет компоновки данных
	Общий.МодельМакетаКомпоновкиДанных()
		.Схема(МодельСхемыКомпоновки.СхемаКомпоновкиДанных)
		.Настройки(МодельНастройкиКомпоновки.Настройки)
		.Скомпоновать()
		.ИдентификаторТаблицы()
		.МенеджерВременныхТаблиц(МодельЗапроса.МенеджерВременныхТаблиц)
		.ВывестиВТабличныйДокумент(Результат)		
	;
	Возврат;
//	
//	
//	
//	Ключ = ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору();
//	Данные = ОбщийКлиентСервер.JSONВОбъект(Объект.ДанныеJSON);
//	МодельЗапроса = Общий.МодельЗапроса()
//	;//  Инициализация таблиц для модели распределения (Таблица, Отношение, База)
//	Для Каждого Таблица Из Данные.Таблицы Цикл
//		МодельЗапроса.ЗапросПакета().Поместить(Таблица.Имя)
//			.Источник(Таблица, Таблица.Имя)
//			.Поле("*")
//			.Автономер(Ключ)
//		;
//	КонецЦикла;
//	МодельЗапроса.ВыполнитьЗапрос();
//	//  Создание модели распределения
//	МодельРаспределения = Общий.МодельРаспределения(МодельЗапроса.МенеджерВременныхТаблиц);  
//	//@skip-check server-execution-safe-mode
//	Выполнить(Объект.МодельDSL);
//	//  Доработка схемы распределения для удобства
//	//Схема = ОбщегоНазначения.СкопироватьРекурсивно(МодельРаспределения.Схема);
//	Схема = МодельРаспределения.Схема;
//	Если НЕ Схема.Таблица.Свойство("Реквизиты") Тогда
//		Схема.Таблица.Вставить("Реквизиты", Новый Массив);
//	КонецЕсли;
//	Если НЕ Схема.База.Свойство("Реквизиты") Тогда
//		Схема.База.Вставить("Реквизиты", Новый Массив);
//	КонецЕсли;
//	//  Распределение с ограничением и без
//	Если Данные.РаспределятьПоСублимитам Тогда
//		//  Инициализация таблиц: отношения лимитов к сублимитам, сублимитов
//		ОтношениеЛимитовКСублимитамJSON = РаботаСМассивом.АТДМассив(Данные.Таблицы).НайтиЭлемент("Элемент.Имя = 'ОтношениеЛимитовКСублимитам'");
//		ОтношениеЛимитовКСублимитам = Общий.СтруктураВТаблицуЗначений(ОтношениеЛимитовКСублимитамJSON);
//		СублимитыJSON = РаботаСМассивом.АТДМассив(Данные.Таблицы).НайтиЭлемент("Элемент.Имя = 'Сублимиты'");
//		Сублимиты = Общий.СтруктураВТаблицуЗначений(СублимитыJSON);
//		//  Заготовка отборов: для отношения, для сублимитов
//		Отбор = Новый Структура("Очередь");
//		ОтборСублимитов = Новый Структура("Сублимит");
//		//  Инициализация распределения и распределение по итерациям
//		Пока МодельРаспределения.Следующий() Цикл
//			СтрокаРезультата = МодельРаспределения.СтрокаРезультата;
//			ЗаполнитьЗначенияСвойств(Отбор, СтрокаРезультата);
//			СтрокиОтношения = ОтношениеЛимитовКСублимитам.НайтиСтроки(Отбор);
//			СписокСублимитов = Новый Массив;
//			Для Каждого СтрокаОтношения Из СтрокиОтношения Цикл
//				ЗаполнитьЗначенияСвойств(ОтборСублимитов, СтрокаОтношения);
//				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСублимитов, Сублимиты.НайтиСтроки(ОтборСублимитов), Истина);
//			КонецЦикла;
//			СуммаРаспределения = СтрокаРезультата.Сумма;
//			Для Каждого СтрокаСублимита Из СписокСублимитов Цикл
//				СуммаРаспределения = Мин(СуммаРаспределения, СтрокаСублимита.Сумма);
//			КонецЦикла;
//			СтрокаРезультата.Сумма = СуммаРаспределения;
//			Для Каждого СтрокаСублимита Из СписокСублимитов Цикл
//				СтрокаСублимита.Сумма = СтрокаСублимита.Сумма - СуммаРаспределения;
//			КонецЦикла;
//		КонецЦикла;
//	Иначе
//		МодельРаспределения.Распределить();
//	КонецЕсли;
//	//  Формирование отчета
//	ВывестиРезультатРаспределения(МодельЗапроса, МодельРаспределения);
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	Результат.Очистить();
	ВыполнитьРаспределение(Результат);
КонецПроцедуры

//@skip-check module-structure-form-event-regions
//@skip-check module-unused-local-variable
&НаСервере
Процедура ПолучитьСхемуИзМоделиНаСервере()
	Перем МодельРаспределения;
	Перем Поля;
	Ключ = ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору();
	Данные = ОбщийКлиентСервер.JSONВОбъект(Объект.ДанныеJSON);
	МодельЗапроса = Общий.МодельЗапроса()
	;//  Инициализация таблиц для модели распределения (Таблица, Отношение, База)
	Для Каждого Таблица Из Данные.Таблицы Цикл
		МодельЗапроса.ЗапросПакета().Поместить(Таблица.Имя)
			.Источник(Таблица, Таблица.Имя)
			.Поле("*")
			.Автономер(Ключ)
		;
	КонецЦикла;
	МодельЗапроса.ВыполнитьЗапрос();
	//  Создание модели распределения
	МодельРаспределения = Общий.МодельРаспределения(МодельЗапроса.МенеджерВременныхТаблиц);  
	//@skip-check server-execution-safe-mode
	Выполнить(Объект.МодельDSL);
	СтруктураМодели.ПолучитьЭлементы().Очистить();
	Для Каждого Элемент Из МодельРаспределения.Схема Цикл
		Если ТипЗнч(Элемент.Значение) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОператора = Элемент.Значение;
		Оператор = СтруктураМодели.ПолучитьЭлементы().Добавить();
		Оператор.Роль = Элемент.Ключ;
		Оператор.Имя = СтруктураОператора.Источник;
		Оператор.Псевдоним = СтруктураОператора.Псевдоним;
		Оператор.Уровень = 0;
		Если СтруктураОператора.Свойство("Измерения", Поля) Тогда
			Секция = Оператор.ПолучитьЭлементы().Добавить();
			Секция.Роль = "Измерения";
			Секция.Уровень = 1;
			Для Каждого СтруктураПоля Из Поля Цикл
				Поле = Секция.ПолучитьЭлементы().Добавить();
				Поле.Роль = "Поле";
				Поле.Имя = СтруктураПоля.Поле;
				Если Поле.Псевдоним <> Поле.Имя Тогда
					Поле.Псевдоним = СтруктураПоля.Псевдоним;
				КонецЕсли;
				Поле.Уровень = 2;
			КонецЦикла;			
		КонецЕсли; 		
		Если СтруктураОператора.Свойство("Ресурсы", Поля) Тогда
			Секция = Оператор.ПолучитьЭлементы().Добавить();
			Секция.Роль = "Ресурсы";
			Секция.Уровень = 1;
			Для Каждого СтруктураПоля Из Поля Цикл
				Поле = Секция.ПолучитьЭлементы().Добавить();
				Поле.Роль = "Поле";
				Поле.Имя = СтруктураПоля.Поле;
				Если Поле.Псевдоним <> Поле.Имя Тогда
					Поле.Псевдоним = СтруктураПоля.Псевдоним;
				КонецЕсли;
				Поле.Уровень = 2;
			КонецЦикла;			
		КонецЕсли; 		
		Если СтруктураОператора.Свойство("Реквизиты", Поля) Тогда
			Секция = Оператор.ПолучитьЭлементы().Добавить();
			Секция.Роль = "Реквизиты";
			Секция.Уровень = 1;
			Для Каждого СтруктураПоля Из Поля Цикл
				Поле = Секция.ПолучитьЭлементы().Добавить();
				Поле.Роль = "Поле";
				Поле.Имя = СтруктураПоля.Поле;
				Если Поле.Псевдоним <> Поле.Имя Тогда
					Поле.Псевдоним = СтруктураПоля.Псевдоним;
				КонецЕсли;
				Поле.Уровень = 2;
			КонецЦикла;			
		КонецЕсли; 		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСхемуИзМодели(Команда)
	ПолучитьСхемуИзМоделиНаСервере();
	Для Каждого Элемент Из СтруктураМодели.ПолучитьЭлементы() Цикл
		Элементы.СтруктураМодели.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСхемуИзДанных(Команда)
	ПолучитьСхемуИзДанныхНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьСхемуИзДанныхНаСервере()
	//TODO: Вставить содержимое обработчика
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	МодельОформления = Общий.МодельОформления(УсловноеОформление)
	;//  Уровень 1
	МодельОформления.ЭлементОформления()
		.Элемент("СтруктураМоделиИмя")
		.Элемент("СтруктураМоделиПсевдоним")
			.Оформление("ТолькоПросмотр", Истина)
			.Оформление("ЦветФона", ЦветаСтиля.ИтогиФонГруппы)
			.Отбор("СтруктураМодели.Уровень", ВидСравненияКомпоновкиДанных.Равно, 1)
	;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОператор(Имя, Порядок)
	Оператор = СтруктураМодели.ПолучитьЭлементы().Добавить();
	Оператор.Роль = Имя;
	Оператор.Порядок = Порядок;
	Если Имя = "Отношение" Тогда
		Секции = Оператор.ПолучитьЭлементы();
		Секция = Секции.Добавить();
		Секция.Роль = "ИзмеренияТаблицы";
		Секция.Уровень = 1;
		Секция = Секции.Добавить();
		Секция.Роль = "ИзмеренияБазы";
		Секция.Уровень = 1;
		Секция = Секции.Добавить();
		Секция.Роль = "Ресурсы";
		Секция.Уровень = 1;
		Возврат;
	КонецЕсли;
	Секции = Оператор.ПолучитьЭлементы();
	Секция = Секции.Добавить();
	Секция.Роль = "Измерения";
	Секция.Уровень = 1;
	Секция = Секции.Добавить();
	Секция.Роль = "Ресурсы";
	Секция.Уровень = 1;
	Секция = Секции.Добавить();
	Секция.Роль = "Реквизиты";
	Секция.Уровень = 1;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиСтруктураМодели

&НаКлиенте
Асинх Процедура ВыбратьУровень(Уровень)
	Меню = Новый СписокЗначений;
	Если Уровень = 0 Тогда
		ЭлементыУровня0 = СтруктураМодели.ПолучитьЭлементы();
		Роли = Новый Массив;
		Для Каждого ЭлементУровня0 Из ЭлементыУровня0 Цикл
			Роли.Добавить(ЭлементУровня0.Имя);
		КонецЦикла;
		Если Роли.Найти("Отношение") = Неопределено Тогда
			Меню.Добавить("Отношение");
		КонецЕсли;
		Если Роли.Найти("База") = Неопределено Тогда
			Меню.Добавить("База");
		КонецЕсли;
		РезультатВыбора = Ждать Меню.ВыбратьЭлементАсинх("Выбор таблицы");
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		//РаботаСМодельюФормыКлиент.ПередНачаломДобавленияСтрокиТаблицыФормы(ЭтотОбъект, Элементы.СтруктураМодели);
		//ЭлементТекущейСтроки = СтруктураМодели.НайтиПоИдентификатору(Элементы.СтруктураМодели.ТекущаяСтрока);
		ЭлементТекущейСтроки = СтруктураМодели.ПолучитьЭлементы().Добавить();
		ЭлементТекущейСтроки.Уровень = 0;
		ЭлементТекущейСтроки.Роль = РезультатВыбора.Значение;
		Если РезультатВыбора.Значение = "Отношение" Тогда
			ЭлементТекущейСтроки.Порядок = 1;
		Иначе
			ЭлементТекущейСтроки.Порядок = 2;
		КонецЕсли;
		РаботаСМассивом.СортироватьЭлементыКоллекции(СтруктураМодели.ПолучитьЭлементы(), "Сравнить(А.Порядок, Б.Порядок)", Ложь);
		ТекущийЭлемент = Элементы.СтруктураМоделиИмя;
		Элементы.СтруктураМодели.ИзменитьСтроку();
		Возврат;
	КонецЕсли;
	Меню.Добавить("Измерения");
	Меню.Добавить("ИзмеренияТаблицы");
	Меню.Добавить("ИзмеренияБазы");
	Меню.Добавить("Ресурсы");
	Меню.Добавить("Реквизиты");
	//РезультатВыбора = ВыбратьИзМеню(Меню);
	РезультатВыбора = Ждать Меню.ВыбратьЭлементАсинх("Выбор секции таблицы");
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементТекущейСтроки = СтруктураМодели.ПолучитьЭлементы().Добавить();
	ЭлементТекущейСтроки.Уровень = 1;
	ЭлементТекущейСтроки.Роль = РезультатВыбора.Значение;
	Если РезультатВыбора.Значение = "Измерения" Тогда
		ЭлементТекущейСтроки.Порядок = 1;
	ИначеЕсли РезультатВыбора.Значение = "ИзмеренияТаблицы" Тогда
		ЭлементТекущейСтроки.Порядок = 2;
	ИначеЕсли РезультатВыбора.Значение = "ИзмеренияБазы" Тогда
		ЭлементТекущейСтроки.Порядок = 3;
	ИначеЕсли РезультатВыбора.Значение = "Ресурсы" Тогда
		ЭлементТекущейСтроки.Порядок = 4;
	Иначе
		ЭлементТекущейСтроки.Порядок = 5;
	КонецЕсли;
	РаботаСМассивом.СортироватьЭлементыКоллекции(СтруктураМодели.ПолучитьЭлементы(), "Сравнить(А.Порядок, Б.Порядок)", Истина);
	ТекущийЭлемент = Элементы.СтруктураМоделиИмя;
	Элементы.СтруктураМодели.ИзменитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура СтруктураМоделиПередНачаломДобавленияСтроки(ТаблицаФормы, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущийЭлемент = Элементы.СтруктураМоделиИмя;
	Если ТаблицаФормы.ТекущиеДанные.Уровень = 0 Тогда
		Отказ = Истина;
		ВыбратьУровень(0);
		Возврат;
	КонецЕсли;
	Если ТаблицаФормы.ТекущиеДанные.Уровень = 1 Тогда
		РаботаСМодельюФормыКлиент.ПередНачаломДобавленияСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы, Отказ, Копирование, Родитель, Группа, Параметр, Истина);
		ЭлементТекущейСтроки = СтруктураМодели.НайтиПоИдентификатору(ТаблицаФормы.ТекущаяСтрока);
		ЭлементТекущейСтроки.Роль = "Поле";
		ЭлементТекущейСтроки.Уровень = 2;
		Возврат;
	КонецЕсли;
	РаботаСМодельюФормыКлиент.ПередНачаломДобавленияСтрокиТаблицыФормы(ЭтотОбъект, ТаблицаФормы, Отказ, Копирование, Родитель, Группа, Параметр);
	ЭлементТекущейСтроки = СтруктураМодели.НайтиПоИдентификатору(ТаблицаФормы.ТекущаяСтрока);
	ЭлементТекущейСтроки.Роль = "Поле";
	ЭлементТекущейСтроки.Уровень = 2;
КонецПроцедуры

#КонецОбласти